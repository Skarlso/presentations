Gopher Puzzlers
How well do you know your language?
20 Nov 2017

Dave Cheney
dave@cheney.net
http://dave.cheney.net/
@davecheney

* Who's read this book?

.image gopher-puzzlers/java-puzzlers.jpg 461 _ 

* Gopher Puzzlers

.image gopher-puzzlers/1e8ys6.jpg

Hopefully this little quiz will surprise you, and perhaps teach you something you didn't know about Go.

* Tick, Tick, Tick

Consider this program

.play -edit gopher-puzzlers/tick.go

Does it

- Exit quickly
- Deadlock
- Dave. That doesn't even compile.

* Tick, Tick, Tick (solution)

_Stop_turns_off_a_ticker._After_Stop,_no_more_ticks_will_be_sent._Stop_does_not_close_the_channel,_to_prevent_a_read_from_the_channel_succeeding_incorrectly_.

.link https://golang.org/pkg/time/#Ticker.Stop time.Ticker.Stop

* Floaty McFloatface

Consider this program

.play -edit gopher-puzzlers/floaty.go

Does it compile?

* Floaty McFloatface (solution)

Although Go does not permit implicit conversion between variables, the rules are different for constants.

Specifically:

A constant value `x` can be converted to type `T` in any of these cases:

- `x` is representable by a value of type `T`.
- // other cases that aren't relevant

.link https://golang.org/ref/spec#Conversions Spec (Conversions)

* Snip, Snip

# https://twitter.com/davecheney/statuses/833052892105891840?tw_i=833052892105891840&tw_e=details&tw_p=archive

What does this program print?

.play -edit gopher-puzzlers/snip.go

- `"abcdef"`
- `"fedcba"`
- `""`
- `"abcedfedcba"`

* Snip, Snip (solution)

`strings.TrimRight` takes a _cutset_ for their second argument.

If the rightmost character is a member of the cutset, it is removed, and we go again, otherwise stop.

`strings.Trim{,Left,Right}` are great for trimming a set of characters (usually whitespace), from a string, but if you know the prefix or suffix, you probably want `strings.Trim{Prefix,Suffix}`

.play -edit gopher-puzzlers/snip2.go

* By the power vested in me

What does this program print?

.play -edit gopher-puzzlers/power.go

- `a`
- `b`
- _nothing_ (doesn't compile)

* By the power vested in me (solution)

`^` is the bitwise exclusive or operator (XOR), not exponentiation.

`a`:=`2`^`15`

   2 = 0010
  15 = 1111
       XOR
  a := 1101

`b`:=`4`^`15`

   4 = 0100
  15 = 1111
       XOR
  b := 1011

∴ `a`>`b`==`true`

* The Terminator

# https://twitter.com/davecheney/status/819759166617108481?s=09

Will this program terminate?

.play -edit gopher-puzzlers/terminator.go

- Yes
- No

* The Terminator (solution)

The `for`...`range` syntax only evaluates the terminating condition _once_, at the start of the loop.

.play -edit gopher-puzzlers/terminator2.go

_Take_Away_: if you are modifying a slice while iterating over it; use a regular `for` loop.

* Do you want to print a Snowman?

# https://twitter.com/davecheney/status/860319875717136384

What does this code print

.play -edit gopher-puzzlers/snowman.go

- ☃
- `[9731]`
- _nothing_ (doesn't compile)

* Do you want to print a Snowman? (solution)

`rune` is an _alias_ for `int32`.

.play -edit gopher-puzzlers/rune.go

What does this program print?

Question: How many other predeclared aliases are there? What are their names?

* A slice of aliases

Which of these declarations are valid?

.play -edit gopher-puzzlers/slices.go

- All of them
- Some of them 
- None of them

* Gofmt you

# https://twitter.com/davecheney/status/803862683380420608?s=09

Is this program valid? Will it compile?

.play -edit gopher-puzzlers/gofmt.go

Is this program correctly formatted? If if feed it to `gofmt` what will happen?

.link https://play.golang.org/p/FuP46_dFM-

* Gofmt you (cont.)

Humans see source files as a list of lines, computers do not. Specifically the compiler treats your source as one long string of text which it punctuates with semicolons according [[https://golang.org/ref/spec#Semicolons][to the rules]].

For example, you're probably ok with this

.play -edit gopher-puzzlers/gofmt2.go

* Gofmt you (cont.)

And you're probably ok with this

.play -edit gopher-puzzlers/gofmt3.go

* The pointy end

# https://twitter.com/davecheney/statuses/896701753365626881?tw_i=896701753365626881&tw_e=details&tw_p=archive

Consider this program

.play -edit gopher-puzzlers/pointer.go

- Does it print `8`8`?
- Does it print `8`9`?
- Does it print `9`9`?
- Does it not even compile?

* Maps

# https://twitter.com/davecheney/status/364215899340804096

Does this program compile?

.play -edit gopher-puzzlers/maps.go

If it does, what does it print?

* Maps (solution)

Yes, it does compile. 

Here is the same program rewritten to be more explicit.

.play -edit gopher-puzzlers/maps2.go

* init, init, init

Does this program compile?

.play -edit gopher-puzzlers/init.go

* init, init, init (cont.)

Does this program compile?

.play -edit gopher-puzzlers/initb.go

* init, init, init (cont.)

`func`init()` is special, it is the _only_ function declaration that can appear multiple times _per_package_. How does this work?

During compilation the compiler rewrites the name of each init function with a unique suffix.

We can observe this suffix with `runtime.Callers` and in panic messages.

.play -edit gopher-puzzlers/init3.go

* init, init, init (cont.)

.play -edit gopher-puzzlers/init2.go

Question: What is the order that init functions are called? Always?

* init, init, init (cont.)

Last question. Does this code compile?

.play -edit gopher-puzzlers/init4.go

* One liners

This program is incorrect.

.play -edit gopher-puzzlers/one-liner.go

By _adding_only_ *one* _line_ can you make it print the correct answer?

_Hint_: the code must be correctly Go formatted, smashing multiple statements onto one line is not the answer.

* One liners (a solution)

Consider this solution.

.play -edit gopher-puzzlers/one-liner-ii.go

Take away: `copy` returns the number of elements it copied from the source to the destination.

#* The size of things
#
#In this program, the size of variables of type `X` and `Y` in memory varies by platform.
#
#.play -edit gopher-puzzlers/size-of-things.go
#
#By changing _only_one_line_ can you ensure that variables of type x, and y always consume *16* bytes on all platforms that Go 1.7 supports?
#
#* The size of things (cont.)
#
#The solution involves setting n to 4 on 32 bit platforms, and 2 on 64 bit using a constant expression.
#
#.play -edit gopher-puzzlers/size-of-things-ii.go /START OMIT/,/END OMIT/
#
#`^uint(0)` gives you a number whose bits are all 1, then `>>`63` shifts the number 63 places to the right. If we’re on a 64 bit platform, this evaluates to 1, shifting 4 one place to the right leaves 2, otherwise 32 ones shifted 63 places to the right gives zero, and 4 shifted right zero times is still 4.
#
#But there is an _even_smaller_ way to write this, can you guess?
#
#* The size of things (cont.)
#
#Credit: Paul Hankin
#
#.play -edit gopher-puzzlers/size-of-things-iii.go /START OMIT/,/END OMIT/
#
#`^uint(6)` is 4294967289 on 32bit platforms, it's the same as `^uint32(6)`
#
#4294967289 divided by 7 is 613566755, with a remainder (modulo) of 4.
#
#`^uint64(6)`%`7` is left as an exercise to the reader.
#
#Question: If I change the first `const` to a `var`, will this code compile?

#* Space packing
#
## https://twitter.com/davecheney/status/652278214195187712 
#
#How much space do values of type `T` consume?
#
#.play -edit gopher-puzzlers/space-packing.go
#
#* Space packing (solution)
#
#For 32 bit platforms, the answer is 8. For 64 bit platforms, the answer is 16.
#
#Let's rearrange the structure and see if that changes anything.
#
#.play -edit gopher-puzzlers/space-packing-ii.go
#
#* Space packing (cont.)
#
#.play -edit gopher-puzzlers/space-packing-iii.go
#
#To prevent the gc from following an invalid pointer, zero width values at the end of structs are considered to be 1 byte wide.
#
#* Space packing (cont.)
#
#So, what the compiler sees is 
#
#.play -edit gopher-puzzlers/space-packing-iv.go

* Zero

Does this program compile?

.play -edit gopher-puzzlers/zero.go

Credit: [[https://twitter.com/peter_szilagyi/status/786206846696644608][Péter Szilágyi]]

* Named and unnamed

Does this code compile ?

.play -edit gopher-puzzlers/named-and-unnamed.go

- Yes: Why?
- No: Why not?

* Named and unnamed (cont.)

Yes, it does compile.

Why is this even a thing?

Well, if it wasn't, then you wouldn't be able to write things like

.code gopher-puzzlers/named-and-unnamed-ii.go /START OMIT/,/END OMIT/

* Named and unnamed (cont.)

There is a bigger point here, [[https://golang.org/ref/spec#Types][unamed types]] are _very_ common in Go.

You'd may not expect this to not compile

.play -edit gopher-puzzlers/named-and-unnamed-iii.go /START OMIT/,/END OMIT/

But would you expect this to compile?

.play -edit gopher-puzzlers/named-and-unnamed-iv.go /START OMIT/,/END OMIT/

* Named and unnamed (cont.)

Here are some common _unnamed_ types; `struct{}`, `[]string`, `interface{}` `map[string]bool`, `[20]float32`, etc. 

This is important because of the [[https://golang.org/ref/spec#Assignability][Assignability]] rules:

"x's type V and T have identical underlying types and at least one of V or T is _not_a_named_type._ "

.play -edit gopher-puzzlers/named-and-unnamed-v.go /START OMIT/,/END OMIT/

#* Two hundred
#
#What does this program print ?
#
#.play -edit gopher-puzzlers/twohundred.go
#
#* Two hundred (cont.)
#
#It prints `200` and `202`.
#
#`x` starts with a length _and_ a capacity of 7.
#
#Appending to `x` must grow the slice, and this causes the backing array to be copied.
#
#However, `y` continues to point at the 2nd element of the original backing array.
#
#Take away: taking the address of an element of a slice, or sub slicing a slice or string will keep the _entire_ backing array alive.

* Missing panic

This program prints a panic message to the screen.

.play -edit gopher-puzzlers/missing-panic.go

Without using `recover`, can you suppress _just_ the panic message? 

We still want the program to exit with a non zero exit code.

_Hint_: adding a `return` before the `panic` statement is not the answer.

* Missing panic (solution)

.play -edit gopher-puzzlers/missing-panic2.go

This is my answer.

* Missing panic (cont.)

What's going on here.

- fd 2 is considered by the runtime to be stderr, [[https://github.com/golang/go/blob/master/src/runtime/write_err.go][panic messages are written to it]].

- fd 2 is initalised as [[https://github.com/golang/go/blob/master/src/os/file.go#L56][os.Stderr]] by the os package.

- If we close os.Stderr, file descriptor 2 is now closed so the write of the panic message.

* How to defuse an atomic bomb

.play -edit gopher-puzzlers/boom.go

- What does this program sometimes print?
- What does this program always print?
- What does this program never print?

Credit: [[https://twitter.com/peter_szilagyi/status/786210562229178370][Péter Szilágyi]]

# * Do you even shift?
#
#Here are four expressions involving shift operations, which ones are valid?
#
#.code gopher-puzzlers/shift.go /START1 OMIT/,/END1 OMIT/
#
#.code gopher-puzzlers/shift.go /START2 OMIT/,/END2 OMIT/
#
#.code gopher-puzzlers/shift.go /START3 OMIT/,/END3 OMIT/
#
#.code gopher-puzzlers/shift.go /START4 OMIT/,/END4 OMIT/
#
#Credit: Robert Griesemer
#
#* Do you even shift? (cont.)
#
#Answer: none of them are valid.
#
#.code gopher-puzzlers/shift.go /START1 OMIT/,/END1 OMIT/
#
#Cannot shift by a negative number.
#
#.code gopher-puzzlers/shift.go /START2 OMIT/,/END2 OMIT/
#
#Shifts must be an _unsigned_ number, `x` defaults to `int`.
#
#.code gopher-puzzlers/shift.go /START3 OMIT/,/END3 OMIT/
#
#This time we're shifting by an unsigned integer, but the value of `y` is `float64`, which means `1.0` is a float64, and `<<` is only defined on integers.
#
#* Do you even shift? (cont.)
#
#.code gopher-puzzlers/shift.go /START4 OMIT/,/END4 OMIT/
#
#The last one is complicated
#
#.code gopher-puzzlers/shift.go /START5 OMIT/,/END5 OMIT/
#
#.link https://github.com/golang/go/issues/14844

* Tokens

Does this code compile?

.play -edit gopher-puzzlers/tokens.go

_Credit_: fuuucl.am on golang-dev.

* Tokens (cont.)

Yes, it does compile. 

If it did not, you would not be able to write 

.play -edit gopher-puzzlers/tokens-ii.go /START OMIT/,/END OMIT/

When the input is broken into tokens, a semicolon is automatically inserted into the token stream immediately after a line's final token if that token is

- an identifier
- an integer, floating-point, imaginary, rune, or string literal
- one of the keywords break, continue, fallthrough, or return
- one of the operators and delimiters ++, --, ), ], or }

.link https://golang.org/ref/spec#Semicolons

* Keywords 

Which of these three functions will not compile?

.play -edit gopher-puzzlers/keywords.go /START OMIT/,/END OMIT/

* Keywords (solution)

`default` is a [[https://golang.org/ref/spec#Keywords][keyword]], it may not be used as identifier.

`string` and `len` are [[https://golang.org/ref/spec#Predeclared_identifiers][predeclared identifiers]].

Predeclared identifiers are at the so called [[https://golang.org/ref/spec#Blocks][_universe_block_]], so you can can shadow them inside smaller scopes, including the _package_block_.

ps. _please_ don't do this.

.play -edit gopher-puzzlers/keywords2.go

… and if you do, [[https://twitter.com/francesc/status/690394659609284608][blame Francesc]].

* Declarations

Which of the following are valid declarations?

.code gopher-puzzlers/declarations.go 

* Declarations (solution)

There are two invalid declarations

`import` is a valid declaration, but it must directly follow `package`.

`func` cannot be used in this form because of the ambiguity with the method syntax.

#* Size classes
#
#What will this code print?
#
#.play -edit gopher-puzzlers/sizeclass.go /START OMIT/,/END OMIT/
#
#Okay, what about this version?
#
#.play -edit gopher-puzzlers/sizeclassb.go /START OMIT/,/END OMIT/
#
#* Size classes (cont.)
#
#Everyone knows that slices are grown by doubling, so but why _isn't_ the cap for both examples 2048?
#
#1024 is a magic cutoff value, where `append` switches from doubling to growing to the next available _size_class_.
#
#Size classes make small (less than an operating system page) cheaper by preallocating pages of N sized things together.
#
#Rather than powers of two, sizeclasses are a set of allocation caches that fit the most common allocations without the exponential overhead of a power of two. Doing this there is never more than 12.5% of wasted space in each size class page.
#
#.play -edit gopher-puzzlers/sizeclass-ii.go

* One, Two, Three

.play -edit gopher-puzzlers/one-two-three.go /START OMIT/,/END OMIT/

What does this program print? Why? Will it always?

* One, Two, Three (cont.)

"For all the cases in the statement, the channel operands of receive operations and the channel and right-hand-side expressions of send statements are evaluated exactly once, in source order, upon entering the "select" statement."

.link https://golang.org/ref/spec#Select_statements

.play -edit gopher-puzzlers/one-two-three-ii.go /START OMIT/,/END OMIT/

* Package names

Which of these four examples are valid package names?

.code gopher-puzzlers/hmm.go

.code gopher-puzzlers/hmm-ii.go

.code gopher-puzzlers/hmm-iii.go

.code gopher-puzzlers/hmm-iv.go

* Packages names (solution)

Package names must be valid [[https://golang.org/ref/spec#identifier][_identifiers_]].

.code gopher-puzzlers/hmm.go

`ಠ` is a _letter_, underscore is also considered a letter.

.code gopher-puzzlers/hmm-ii.go

`100` is a _number_, which is allowed, but identifiers _must_ start with a _letter_.

.code gopher-puzzlers/hmm-iii.go

`ಠ` is a _letter_, `~` is _not_ a letter.

.code gopher-puzzlers/hmm-iv.go

`すし` is an identifier, it's Japanese for _sushi_.

#* Bonus
#
#Package names are identifiers, so everything that is a valid package name is also be a valid function, variable, constant or type name.
#
#So, if we wrote a package using these identifiers;
#
#.code gopher-puzzlers/bonus.go
#
#What will it look like on godoc.org?
#
#.link https://godoc.org/github.com/davecheney/p
#
#* Bonus (solution).
#
#ಠ, the Kannada letter ṭha, and す, the Hiragana letter su, are not upper case letters.
#
#.play -edit gopher-puzzlers/bonus2.go /START OMIT/,/END OMIT/
#
#They're not considered lower case either, but that's another story.
