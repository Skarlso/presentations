HDE, Tokyo, Japan
8 Dec 2014

Dave Cheney
dave@cheney.net
http://dave.cheney.net/
@davecheney

* Programming philosophy

The 80's were a golden time for programming language design.

- ADA, Smalltalk, C++, Self
- First AI winter
- Hardware was large enough to support _huge_ programs, developed by _huge_ numbers of programmers.

The 90's was a golden time for programming philosophy.

- SOLID
- TDD, BDD, DDD
- Modularity

People have thought about designing huge programs since the 80's, don't reinvent their wheel.

* Overcoming complexity

"There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult."
.caption C. A. R. Hoare, 1980 Turing Award Lecture

Simplicity is not a synonym for easy, nor is achieving a design which is simple an easy task. Putting this into the context of programming languages, something which is simple may take a little longer, it may be a little more verbose, but it will be more comprehensible, more extensible, more adaptable, and exhibit lower coupling.  

"We know we have to keep it crisp, disentangled, and simple if we refuse to be crushed by the complexities of our own making."
.caption [[https://www.cs.utexas.edu/users/EWD/transcriptions/EWD12xx/EWD1243a.html][Edsger W.Dijkstra]]

"Simplicity is the unavoidable price which we must pay for reliability."
.caption C. A. R. Hoare

* Readability
"Programs must be written for people to read, and only incidentally for machines to execute."
.caption Hal Abelson and Gerald Sussman, Structure and Interpretation of Computer Programs

The source code of a program is an intermediary form, somewhere between the author's concept and the computer's executable notation. In that sense source code is an encoded form of an idea, a process, an algorithm, or a formula. Just like musical notation.

"We don’t read code, we decode it. We examine it. A piece of code is not literature; it is a specimen."
.caption [[http://www.gigamonkeys.com/code-reading/][Peter Seibel]]

Go places readability above all other considerations, because source code is written to be read. Many of the choices relating to Go's syntax speak to the needs of the reader. Go's syntax is spartan because of its drive for readability.

* Change

"Design is the art of arranging code that needs to work _today_, and to be easy to change _forever_."
.caption Sandi Metz

Why do Go programmers care _so_much_ about readability?

Code is written once and read many times.

Change is what we're paid to do.

We _must_ make it possible for our software to accommodate business change. Quickly. Safely. Reliably.

* Design

"There's a great line in Strunk & White about [where] you'll find places where the rules are broken, but you'll find some compensating merit to make up for it."
.caption Brian Kernighan

"Some people think that programming should be an art, every construct should be perfectly expressed and abstracted and beautiful, and things like simplicity, portability, and performance are unimportant details. Other people write programs to consume input and produce output, for various values of input and output. The real value of development is the work the program does, not the work the programmer does."
.caption [[https://www.reddit.com/r/golang/comments/30bndg/how_do_you_respond_to_these_antigolang_pieces/cpslzwh][/r/golang]]

"Design means saying No."
.caption _Me_

* Behaviour and type are different things

Interfaces describe behaviour, structs describe data.

OO mocks this idea; the _data_class_ is a called a code smell.

Not everything is an object, some things are just data, and other things are just behaviour.

These should be separate concepts.

- If you're talking about behaviour, return functions or interface value.
- If you're talking about data, return a primitive value or struct.

* Accept interfaces, return structs

APIs should describe their parameters in terms of their behaviour rather than their type.

Functions should either consume universe data types or interface values _they_define_.

ie. `ioutil.ReadAll(io.Reader)` vs `ioutil.ReadAll(*os.File)`

Where possible, interfaces belong to the consumer. Don't import a package just to agree on an interface defintion.

So, why return concrete types (or universe types)?

- Reduce the possibility of typed nils.
- You're already coupled to the name of the function, so the name of a type is no worse.

* Give things fewer names

Reduce source level coupling by removing the requirement for everyone to use the same name

Avoid named return values.

* Methods on a T vs methods on a *T
Everything in Go is a copy, without exception.

We also know that method calls are just syntactic sugar for calling a function an passing the receiver as the first parameter. So, what are the rules for how the recover is passed, as a value, or a pointer.

- Use a pointer receiver when the caller will change the receiver, possibly this could be written as use a pointer receiver when the method is stateful.
- Use a value receiver when the receiver is immutable, one of the few std lib examples of this is the `time.Time` type.

But even that is incomplete, many methods exist because they need to implement an interfaces, otherwise they'd just be functions, and that seems to cut across this immutable/stateful boundary.

- In general, use pointer receivers.
- If you use a ptr receiver on one method, the rest should follow suit.
- Return values with methods by reference, and those without by value.

* Errors are just values

"Errors are just values."
.caption Rob Pike, Go Proverbs.

- Errors should be opaque
- Never use nil to indicate failure
- Only handle an error once; handle an error _or_ return it
- Assert errors for behaviour, not type

* Fewer, larger packages

Think of your package's name as an elevator pitch to describe what it does, using just one word.

Go eschewed type hierarchy, don't make the mistake or replacing that with an elaborate package hierarchy. That will lead to too many internal types being made public.

- Two packages that are always imported together, may be combine
- One package that is never imported, only via a third, maybe combine.

Each Go package is in effect it’s own small Go program. We see this in the compilation model.

- In C you ask questions like, "if I change this header file, which source files include it and need rebuilding?"
- In Go the unit of compilation is the package, so we ask, "which packages does this package depend on?"

* Avoid conflicts with the names of common local variables 
Don't steal the name of a common identifier for the name of a package

The import statement declares a new identifier at the package level.

Consider the problems naming a package that deals with file descriptors “fd” as fd would be the natural identifier for a file descriptor value returned by some hypothetical fd.Open function.

* Avoid empty packages.

An empty package is a sign you developing a package hierarchy.

An exception to this rule is the use of grouping main packages into a `cmd` directory.

* The most reasonable channels sizes are usually zero and one.

Prefer unbuffered channels.

* How to lay out Go projects

- single pkg, single lib, Multi paxkage, application, project. 

Use `testdata`, use `vendor/` (if you're an application), use `internal/`

- vendoring is what it is, use grep and write a Makefile for complex projects.

Get onboard with `$GOPATH`, use `go`build`, `go`install`, `go`test`-race`.

Comment everything, use the google shell docs

* Name your tests with a prefix of they type they test

Name your tests with a prefix of they type they test so you can run and check the coverage of a type without taking the code out of circuit

* Only log actionable items

Go is designed for production, the ones concerned with its output should be told when and only when it goes wrong

For development add a debug or -v flag

* Use streaming IO interfaces

Where-ever possible avoid reading data into a `[]byte` and passing it around.

Depending on the request you may end up reading megabytes (or more!) of data into memory. This places huge pressure on the GC, which will increase the average latency of your application.

Instead use `io.Reader` and `io.Writer` to construct processing pipelines to cap the amount of memory in use per request.

For efficiency, consider implementing `io.ReaderFrom` / `io.WriterTo` if you use a lot of `io.Copy`. These interface are more efficient and avoid copying memory into a temporary buffer.

* Syntax is irrelevant

To the extent that readability is paramount, language syntax is mostly irrelevant.

What matters in a multicore world is the semantics of how multiple processes (goroutines) communicate.

* Never start a goroutine without knowing how it will finish

Goroutines are cheap to start and cheap to run, but they do have a finite cost in terms of memory footprint; you cannot create an infinite number of them.

Every time you use the `go` keyword in your program to launch a goroutine, you must *know* how, and when, that goroutine will exit.

If you don't know the answer, that's a potential memory leak.

In your design, some goroutines may run until the program exits. These goroutines are rare enough to not become an exception to the rule.

*Never*start*a*goroutine*without*knowing*how*it*will*stop*.

* Don't trade performance for reliability

"I can make things very fast if they don't have to be correct."
.caption Russ Cox

Performance and reliability are equally important.

I see little value in making a very fast server that panics, deadlocks or OOMs on a regular basis.

Don't trade performance for reliability.
